from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import fetch_20newsgroups
# Load the 20 newsgroups dataset
newsgroups = fetch_20newsgroups(subset='all', remove=('headers', 'footers', 'quotes'))

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(newsgroups.data, newsgroups.target, test_size=0.2, random_state=42)
# Vectorize the text data using TF-IDF vectorizer = TfidfVectorizer(max_features=10000) X_train_tfidf = vectorizer.fit_transform(X_train) X_test_tfidf = vectorizer.transform(X_test)

# Train a Multinomial Naive Bayes classifier classifier = MultinomialNB() classifier.fit(X_train_tfidf, y_train)
# Make predictions on the test set y_pred = classifier.predict(X_test_tfidf)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred) print(f"Accuracy: {accuracy:.2f}")
# Display classification report print("\nClassification Report:") print(classification_report(y_test, y_pred, target_names=newsgroups.target_names))

# Display confusion matrix print("\nConfusion Matrix:") print(confusion_matrix(y_test, y_pred))








Given a dataset of 20_newsgroups, build a classification model using SVM classifier that can accurately classify documents into categories like “alt.atheism,” “soc.religion.christian,” “comp.graphics,” or “sci.med,”
Program

from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the 20 Newsgroups dataset
categories = ['alt.atheism', 'soc.religion.christian', 'comp.graphics', 'sci.med']
newsgroups_train = fetch_20newsgroups(subset='train', categories=categories) newsgroups_test = fetch_20newsgroups(subset='test', categories=categories)
# Extract features from text using TF-IDF Vectorizer vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(newsgroups_train.data) X_test = vectorizer.transform(newsgroups_test.data) y_train = newsgroups_train.target
y_test = newsgroups_test.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)
# Train the SVM classifier svm_classifier = SVC(kernel='linear') svm_classifier.fit(X_train, y_train)
# Make predictions on the testing set predictions = svm_classifier.predict(X_test)
# Evaluate the model
accuracy = accuracy_score(y_test, predictions) print("Accuracy:", accuracy) print("Classification Report:") print(classification_report(y_test, predictions, target_names=newsgroups_test.target_names))
