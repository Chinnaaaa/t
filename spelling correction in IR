import numpy as np import nltk
from nltk.corpus import words
# Load the NLTK words corpus nltk.download('words') nltk_words = set(words.words())

# Spelling correction function
def levenshtein_distance(word1, word2): len1, len2 = len(word1), len(word2)
distances = np.zeros((len1 + 1, len2 + 1), dtype=int) for i in range(len1 + 1):
distances[i, 0] = i for j in range(len2 + 1):
distances[0, j] = j
for i in range(1, len1 + 1): for j in range(1, len2 + 1):
cost = 0 if word1[i - 1] == word2[j - 1] else 1 distances[i, j] = min(
distances[i - 1, j] + 1,
distances[i, j - 1] + 1, distances[i - 1, j - 1] + cost
)
return distances[len1, len2]

def correct_spelling(input_word, candidate_words): min_distance = float('inf')
corrected_word = input_word
for candidate in candidate_words:
distance = levenshtein_distance(input_word, candidate) if distance < min_distance:
min_distance = distance corrected_word = candidate
return corrected_word
# Information retrieval function def search(query, dictionary):
# Split the query into individual words query_terms = query.split()
# Spell-correct each query term
 
corrected_query_terms = [correct_spelling(term, dictionary) for term in query_terms]
#Return the corrected query terms return corrected_query_terms
# Example usage
user_query = input("Enter your query: ") corrected_query = search(user_query, nltk_words)

print(f"User Query: {user_query}")
print(f"Corrected Query: {' '.join(corrected_query)}")

