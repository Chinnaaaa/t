Code: import queue as Q
from RMP import dict_gn

start = 'Arad'
goal = 'Bucharest' result
= ''

def BFS(city, cityq, visitedq): global result
if city == start:
result = result + '' + city	for eachcity in dict_gn[city].keys():
if eachcity == goal:
result = result + ' ' + eachcity	return	if eachcity not in cityq.queue and eachcity not in visitedq.queue:
cityq.put(eachcity) result = result + ' ' + eachcity visitedq.put(city)

def main():		cityq = Q.Queue()	visitedq = Q.Queue()	BFS(start, cityq, visitedq) print('BFS Traversal From', start, 'to', goal, 'is:') print(result)

if	name	== '	main	': main()








 
B.	Implement the Iterative Depth First Search algorithm to solve the same problem.


Code:
from RMP import dict_gn

Start = "Arad" Goal = "Bucharest" Result = ""

def DLS(city, visitedstack, startlimit, endlimit): global Result found = 0
Result = Result + city + " " visitedstack.append(city) if city == Goal:
return 1	if startlimit == endlimit:
return 0	for eachcity in dict_gn[city].keys():	if eachcity not in visitedstack:
found = DLS(eachcity, visitedstack, startlimit + 1, endlimit) if found:
return found

def IDDFS(city, visitedstack, endlimit):	global Result	for i in range(0, endlimit):
print("Searching at Limit:", i) found = DLS(city, visitedstack, 0, i) if found:		print("Found!") break	else:
print("Not Found!") print(Result)
print("	") Result = ""
visitedstack = []
 
def main(): visitedstack = []
IDDFS(Start, visitedstack, 9)	print("IDDFS Traversal from", Start, "to", Goal, "is:")	print(Result)

if		name	== "	main	": main()



